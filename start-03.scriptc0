import "механоид_3/динамика.diff" type Динамика;
import "механоид_3/враги.scriptc0" type Враги;
import "механоид_3/механоид.scriptc0" type Механоид;
import "механоид_3/движение_механоида.scriptc0" type Движение_механоида движение;
import "механоид_3/ракета.scriptc0" type Ракета;
import "механоид_3/команды_ракет.scriptc0" type Команды_ракет оружие;
import "механоид_3/пушка.scriptc0" type Пушка;
import "механоид_3/параметры_изм.scriptc0" type Параметры параметры;
import "механоид_3/параметры_неизм.scriptc0" type Константы константы;
import "механоид_3/элемент.scriptc0" type Элемент;
import "механоид_3/СУ_Механоид0.scriptc0" type СуМеханоид0 СУ0;
import "механоид_3/СУ_Механоид1.scriptc0" type СуМеханоид1 СУ1;
import "механоид_3/СУ_Механоид2.scriptc0" type СуМеханоид2 СУ2;
import "механоид_3/СУ_Механоид3.scriptc0" type СуМеханоид3 СУ3;


// Общие функции, связанные с mechanoid, scence
void mechanoidAddStatus(string name, int health, int load) {
    mechanoid.addStatus(name, health, load);
}

void mechanoidAddSettings(string name, int shape, int size, int color) {
    mechanoid.addSettings(name, shape, size, color);
}

void mechanoidAddPoint(string name, float x, float y) {
    mechanoid.addPoint(name, x, y);
}

void mechanoidEnableLabelView(string name) {
    mechanoid.enableLabelView(name);
}

void mechanoidRemovePoint(string name) {
    mechanoid.removePoint(name);
}

void mechanoidUpdateStatus(string name, int health, int load) {
    mechanoid.updateStatus(name, health, load);
}

void sceneAdd(Динамика д){
    scene.add(д);
}

void sceneRemove(Динамика д) {
    scene.remove(д);
}

float sceneT() {
    return (scene.t());
}

// Замещение фукнций модулей
параметры.mechanoidAddStatus = mechanoidAddStatus;
параметры.mechanoidAddSettings = mechanoidAddSettings;
параметры.mechanoidAddPoint = mechanoidAddPoint;
параметры.mechanoidEnableLabelView = mechanoidEnableLabelView;
параметры.sceneAdd = sceneAdd;

параметры.mechanoid_mesh_triangle = mechanoid.Mesh.Triangle;
параметры.mechanoid_color_yellow = mechanoid.Color.Yellow;

оружие.mechanoidAddSettings = mechanoidAddSettings;
оружие.mechanoidRemovePoint = mechanoidRemovePoint;
оружие.mechanoidUpdateStatus = mechanoidUpdateStatus;
оружие.sceneAdd = sceneAdd;
оружие.sceneRemove = sceneRemove;
оружие.sceneT = sceneT;

оружие.mechanoid_mesh_square = mechanoid.Mesh.Square;
оружие.mechanoid_color_magenta = mechanoid.Color.Magenta;

движение.sceneT = sceneT;


/*
for(int i=0; i < константы.количество_механоидов; ++i) {
    mechanoid.addStatus("М"+i, параметры.м[i].здоровье, параметры.м[i].пушка.количество_зарядов);
}
*/

/*
auto Режим = { Высадка : 0, Бой : 1};
int режим = Режим.Бой;
*/

// Создание флагов
параметры.falgsInit();

// Создание механоидов
параметры.mechanoidsInit();

// Инициализация графиков
chart.init("Сцена");
// graph3d.init("Сцена");

mechanoid.init("_", константы.ширина_поля, константы.высота_поля);
mechanoid.clearLog();

/*
mechanoid.addSettings("Ф" + параметры.количество_захваченных_флагов, mechanoid.Mesh.Triangle, константы.размер_флага, mechanoid.Color.Yellow);
mechanoid.addPoint("Ф" + параметры.количество_захваченных_флагов, 
                    параметры.флаг[параметры.количество_захваченных_флагов].x,
                    параметры.флаг[параметры.количество_захваченных_флагов].y );
параметры.флаг[параметры.количество_захваченных_флагов].отображается = true;
*/

mechanoid.addSettings("М"+0, mechanoid.Mesh.Circle, константы.размер_механоида, mechanoid.Color.Blue);
mechanoid.enableLabelView("М"+0);
mechanoid.addSettings("М"+1, mechanoid.Mesh.Circle, константы.размер_механоида, mechanoid.Color.Orange);
mechanoid.enableLabelView("М"+1);
mechanoid.addSettings("М"+2, mechanoid.Mesh.Circle, константы.размер_механоида, mechanoid.Color.Purple);
mechanoid.enableLabelView("М"+2);
mechanoid.addSettings("М"+3, mechanoid.Mesh.Circle, константы.размер_механоида, mechanoid.Color.Red);
mechanoid.enableLabelView("М"+3);

// Проверка попадания ракеты
void rocketHit(int cur) {
    for(int i = параметры.м[cur].пушка.макс_колво_зарядов - 1; i >= параметры.м[cur].пушка.количество_зарядов; --i) {
        if (параметры.м[cur].пушка.обойма[i].отображать == true) {
            for (int j = 0; j < константы.количество_механоидов; ++j) {
                if (j != cur) {
                    if (параметры.м[j].жив) {
                            // if (math.vec2Len(math.abs(м[j].д.y1-м[cur].пушка.обойма[i].ракета.y1), math.abs(м[j].д.y3-м[cur].пушка.обойма[i].ракета.y3)) <= math.abs(параметры.размер_механоида + параметры.размер_ракеты))
                        if (math.vec2Len(параметры.м[j].д.y1-параметры.м[cur].пушка.обойма[i].ракета.y1, параметры.м[j].д.y3-параметры.м[cur].пушка.обойма[i].ракета.y3)
                <= math.toFloat(константы.размер_механоида + константы.размер_ракеты)) {
                            if(параметры.м[j].броня.прочность <= 0) {
                                    параметры.м[j].здоровье -= 10;
                                }
                                else {
                                    параметры.м[j].броня.прочность -= 10;
                                }
                                if(параметры.м[j].броня.прочность > 0 && параметры.м[j].броня.прочность - 10 <= 0) {
                                    mechanoid.sendLogMsg("Механоид" + cur + " потерял броню ");
                                }
                            if (параметры.м[j].здоровье <= 0) {
                                параметры.м[j].жив = false;
                                параметры.м[cur].количество_очков += 3;
                                mechanoid.sendLogMsg("Механоид" + cur + " убил Механоида " + j + ". Количество очков Механоид" + cur + " - " + параметры.м[cur].количество_очков);
                            }
                            mechanoid.updateStatus(параметры.м[j].имя, параметры.м[j].здоровье + параметры.м[j].броня.прочность, параметры.м[j].пушка.количество_зарядов);
                            // mechanoid.sendLogMsg("Механоид" + cur + " попал в Механоида " + j + " оставшееся здоровье " + м[j].здоровье + " Время: "+scene.t()+" c " + math.sqrt((м[j].д.y1-м[cur].пушка.обойма[i].ракета.y1)^2 + (м[j].д.y3-м[cur].пушка.обойма[i].ракета.y3)^2));
                            параметры.м[cur].пушка.обойма[i].отображать = false;
                            mechanoid.removePoint("Ракета" + параметры.м[cur].имя + i);
                        }
                    }
                }
            }
        }
    }
}

/*
// Обрезаем массив, если в него положили меньше 3 значений
void cutEnemyList(Механоид механоид, int длина_массива) {
    if (длина_массива < константы.количество_механоидов - 1) {
        Элемент видимые_враги[длина_массива];
        float расстояние_до_врагов[длина_массива];
        int индексы_ближайших_врагов[длина_массива];
        
        for(int i = 0; i < длина_массива; i++) {
            видимые_враги[i] = механоид.видимые_враги[i];
            расстояние_до_врагов[i] = механоид.расстояние_до_врагов[i];
            индексы_ближайших_врагов[i] = механоид.индексы_ближайших_врагов[i];
        }
        
        механоид.видимые_враги = видимые_враги;
        механоид.расстояние_до_врагов = расстояние_до_врагов;
        механоид.индексы_ближайших_врагов = индексы_ближайших_врагов;
    }
}

// Обрезаем массив, если в него положили меньше, чем количество_флагов
void cutFlagList(Механоид механоид, int длина_массива) {
    if (длина_массива < константы.количество_флагов) {
        Элемент видимые_флаги[длина_массива];
        float расстояние_до_флагов[длина_массива];
        int индексы_ближайших_флагов[длина_массива];
        
        for(int i = 0; i < длина_массива; i++) {
            видимые_флаги[i] = механоид.видимые_флаги[i];
            расстояние_до_флагов[i] = механоид.расстояние_до_флагов[i];
            индексы_ближайших_флагов[i] = механоид.индексы_ближайших_флагов[i];
        }
        
        механоид.видимые_флаги = видимые_флаги;
        механоид.расстояние_до_флагов = расстояние_до_флагов;
        механоид.индексы_ближайших_флагов = индексы_ближайших_флагов;
    }
}
*/

// Сортировка врагов по расстоянию (от ближайшего к дальнему)
void enemySort(Механоид механоид) {
    // cutEnemyList(механоид, длина_массива);
    while(true)
    {
        bool swapped = false;
        for(int i = 0; i < механоид.количество_увиденных_врагов - 1; i++)
        {
            if (механоид.расстояние_до_врагов[механоид.индексы_ближайших_врагов[i]] > механоид.расстояние_до_врагов[механоид.индексы_ближайших_врагов[i + 1]])
            {
                int swap = механоид.индексы_ближайших_врагов[i + 1];
                механоид.индексы_ближайших_врагов[i + 1] = механоид.индексы_ближайших_врагов[i];
                механоид.индексы_ближайших_врагов[i] = swap;
                swapped = true;
            }
        }

        if (swapped == false)
            break;
    }
}

// Сортировка флагов по расстоянию (от ближайшего к дальнему)
void flagSort(Механоид механоид) {
    // cutFlagList(механоид, длина_массива);
    while(true)
    {
        bool swapped = false;
        for(int i = 0; i < механоид.количество_увиденных_флагов - 1; i++)
        {
            if (механоид.расстояние_до_флагов[механоид.индексы_ближайших_флагов[i]] > механоид.расстояние_до_флагов[механоид.индексы_ближайших_флагов[i + 1]])
            {
                int swap = механоид.индексы_ближайших_флагов[i + 1];
                механоид.индексы_ближайших_флагов[i + 1] = механоид.индексы_ближайших_флагов[i];
                механоид.индексы_ближайших_флагов[i] = swap;
                swapped = true;
            }
        }

        if (swapped == false)
            break;
    }
}

// Работа датчика зрения механоида
void vision(int cur) {
    // Обнуляем всё, что видит механоид   
    Элемент видимые_враги[константы.количество_механоидов - 1];
    float расстояние_до_врагов[константы.количество_механоидов - 1];
    int индексы_ближайших_врагов[константы.количество_механоидов - 1];

    параметры.м[cur].видимые_враги = видимые_враги;
    параметры.м[cur].расстояние_до_врагов = расстояние_до_врагов;
    параметры.м[cur].индексы_ближайших_врагов = индексы_ближайших_врагов;
    параметры.м[cur].количество_увиденных_врагов = 0;

    Элемент видимые_флаги[константы.количество_флагов];
    float расстояние_до_флагов[константы.количество_флагов];
    int индексы_ближайших_флагов[константы.количество_флагов];

    параметры.м[cur].видимые_флаги = видимые_флаги;
    параметры.м[cur].расстояние_до_флагов = расстояние_до_флагов;
    параметры.м[cur].индексы_ближайших_флагов = индексы_ближайших_флагов;
    параметры.м[cur].количество_увиденных_флагов = 0;
    
    // Проверяем вражеские механоиды
    for(int i=0; i < константы.количество_механоидов; ++i) {
        if (cur != i) {
            if (параметры.м[i].жив) {
                float расстояние_до_врага = math.vec2Len(параметры.м[i].д.y1 - параметры.м[cur].д.y1, параметры.м[i].д.y3 - параметры.м[cur].д.y3);
                if (расстояние_до_врага  <= параметры.м[cur].радиус_зрения)
                {
                    if ((scene.t() - параметры.м[cur].сообщение_врага) > 1.0) {
                        sys.print("Механоид" + cur + " увидел механоида " + i + "  Время: "+scene.t()+" c");
                        // mechanoid.sendLogMsg("Механоид" + cur + " увидел Механоида " + i + "  Время: "+scene.t()+" c");
                        параметры.м[i].сообщение_врага = scene.t();
                    }
                    параметры.м[cur].видимые_враги[параметры.м[cur].количество_увиденных_врагов].x = параметры.м[i].д.y1;
                    параметры.м[cur].видимые_враги[параметры.м[cur].количество_увиденных_врагов].y = параметры.м[i].д.y3;
                    параметры.м[cur].расстояние_до_врагов[параметры.м[cur].количество_увиденных_врагов] = расстояние_до_врага;

                    параметры.м[cur].индексы_ближайших_врагов[параметры.м[cur].количество_увиденных_врагов] = параметры.м[cur].количество_увиденных_врагов;
                    параметры.м[cur].количество_увиденных_врагов += 1;
                }
            }
        }
    }
    
    // Проверяем флаги
    if (параметры.количество_захваченных_флагов < константы.количество_флагов) {
        for(int i=0; i < константы.количество_флагов; ++i) {
            if (параметры.флаг[i].отображать) {
               float расстояние_до_флага = math.vec2Len(параметры.флаг[i].x - параметры.м[cur].д.y1, параметры.флаг[i].y - параметры.м[cur].д.y3);
               if (расстояние_до_флага <= параметры.м[cur].радиус_зрения)
                {
                    параметры.м[cur].видимые_флаги[параметры.м[cur].количество_увиденных_флагов].x = параметры.флаг[i].x;
                    параметры.м[cur].видимые_флаги[параметры.м[cur].количество_увиденных_флагов].y = параметры.флаг[i].y;
                    параметры.м[cur].расстояние_до_флагов[параметры.м[cur].количество_увиденных_флагов] = расстояние_до_флага;

                    параметры.м[cur].индексы_ближайших_флагов[параметры.м[cur].количество_увиденных_флагов] = параметры.м[cur].количество_увиденных_флагов;
                    параметры.м[cur].количество_увиденных_флагов += 1;
                }
            }
        }
    }
    
    // Сортируем индексы по расстоянию 
    enemySort(параметры.м[cur]);
    flagSort(параметры.м[cur]);    
}

// Проверка достижения флага
void flagCatch(int i, int mode) 
{
    // Режим работы, когда флаги появляются последовательно
    if (mode == 0) {
        if (параметры.количество_захваченных_флагов < константы.количество_флагов) 
        {
            if (math.vec2Len(параметры.флаг[параметры.количество_захваченных_флагов].x-параметры.м[i].д.y1, параметры.флаг[параметры.количество_захваченных_флагов].y 
            - параметры.м[i].д.y3) <= math.toFloat(константы.размер_механоида + константы.размер_флага))
            {
                sys.print("Механоид" + i + " захватил флаг " + параметры.количество_захваченных_флагов + "! Время: " + scene.t() + " c" );
                параметры.м[i].количество_очков += 1;
                mechanoid.sendLogMsg("Механоид" + i + " захватил Флаг " + (параметры.количество_захваченных_флагов + 1) + "! Количество очков Механоид" + i + " - " + параметры.м[i].количество_очков);
            
                mechanoid.removePoint("Ф" + параметры.количество_захваченных_флагов);
                // параметры.флаг[параметры.количество_захваченных_флагов].отображается = false;
                
                параметры.количество_захваченных_флагов++;
                
                // Установка следующего флага
                if (параметры.количество_захваченных_флагов < константы.количество_флагов) 
                {
                    mechanoid.addSettings("Ф" + параметры.количество_захваченных_флагов, mechanoid.Mesh.Triangle, константы.размер_флага, mechanoid.Color.Yellow);
                    mechanoid.addPoint("Ф" + параметры.количество_захваченных_флагов,
                        параметры.флаг[параметры.количество_захваченных_флагов].x,
                        параметры.флаг[параметры.количество_захваченных_флагов].y);
                    параметры.флаг[параметры.количество_захваченных_флагов].отображать = true;
                }
            }
        }
    }

    // Режим работы, когда все флаги уже на карте
    if (mode == 1) {
        if (параметры.количество_захваченных_флагов < константы.количество_флагов) {
            for (int j = 0; j < константы.количество_флагов; j++) {
                if (параметры.флаг[j].отображать == true) {
                    if (math.vec2Len(параметры.флаг[j].x-параметры.м[i].д.y1, параметры.флаг[j].y
            - параметры.м[i].д.y3) <= math.toFloat(константы.размер_механоида + константы.размер_флага)) {
                        sys.print("Механоид" + i + " захватил флаг! Время: " + scene.t() + " c" );
                        параметры.м[i].количество_очков += 1;
                        mechanoid.sendLogMsg("Механоид" + i + " захватил Флаг! Количество очков Механоид" + i + " - " + параметры.м[i].количество_очков);
                        параметры.флаг[j].отображать = false;
                    }
                }
            }
        }
    }
}

void onIteration() {
    // Для каждого механоида определим, что он видит
    for(int i=0; i < константы.количество_механоидов; i++) {
        vision(i);
        flagCatch(i, 1);
    }

    // Запуск СУ для каждого механоида
    if (параметры.м[0].жив) {
        // Инициализация входящих данных СУ0
        СУ0.механоид = параметры.м[0];        
        СУ0.количество_зарядов = параметры.м[0].пушка.количество_зарядов;
        СУ0.out_rocket_launch = false;
        СУ0.out_target_movement = false;
        СУ0.out_default_movement = false;
        СУ0.out_default_sinus_movement = false;
        
        СУ0.mechanoidControl();
        
        // Обработка выходящих данных из СУ0
        if (СУ0.out_rocket_launch == true) {
            оружие.rocketLaunch(параметры.м[0], СУ0.out_rocket_target_x, СУ0.out_rocket_target_y);
            //mechanoid.sendLogMsg("Механоид" + 0 + " время выстрела " + параметры.м[0].пушка.время_выстрела);
        }
        if (СУ0.out_target_movement == true) {
            движение.targetMovement(параметры.м[0], СУ0.out_target_movement_x, СУ0.out_target_movement_y);
        }
        if (СУ0.out_default_movement == true) {
            движение.defaultMovement(параметры.м[0], СУ0.out_default_movement_len, СУ0.out_default_movement_mode);
        }
        
        // mechanoid0Control();
    }
    if (параметры.м[1].жив) {
        // Инициализация входящих данных СУ1
        СУ1.механоид = параметры.м[1];        
        СУ1.количество_зарядов = параметры.м[1].пушка.количество_зарядов;
        СУ1.out_rocket_launch = false;
        СУ1.out_target_movement = false;
        СУ1.out_default_movement = false;
        СУ1.out_default_sinus_movement = false;
        
        СУ1.mechanoidControl();
        
        // Обработка выходящих данных из СУ1
        if (СУ1.out_rocket_launch == true) {
            оружие.rocketLaunch(параметры.м[1], СУ1.out_rocket_target_x, СУ1.out_rocket_target_y);
            //mechanoid.sendLogMsg("Механоид" + 1 + " время выстрела " + параметры.м[1].пушка.время_выстрела);
        }
        if (СУ1.out_target_movement == true) {
            движение.targetMovement(параметры.м[1], СУ1.out_target_movement_x, СУ1.out_target_movement_y);
        }
        if (СУ1.out_default_movement == true) {
            движение.defaultMovement(параметры.м[1], СУ1.out_default_movement_len, СУ1.out_default_movement_mode);
        }
        
        // mechanoid1Control();
    }
    if (параметры.м[2].жив) {
        // Инициализация входящих данных СУ2
        СУ2.механоид = параметры.м[2];        
        СУ2.количество_зарядов = параметры.м[2].пушка.количество_зарядов;
        СУ2.out_rocket_launch = false;
        СУ2.out_target_movement = false;
        СУ2.out_default_movement = false;
        СУ2.out_default_sinus_movement = false;
        
        СУ2.mechanoidControl();
        
        // Обработка выходящих данных из СУ2
        if (СУ2.out_rocket_launch == true) {
            оружие.rocketLaunch(параметры.м[2], СУ2.out_rocket_target_x, СУ2.out_rocket_target_y);
            //mechanoid.sendLogMsg("Механоид" + 2 + " время выстрела " + параметры.м[2].пушка.время_выстрела);
        }
        if (СУ2.out_target_movement == true) {
            движение.targetMovement(параметры.м[2], СУ2.out_target_movement_x, СУ2.out_target_movement_y);
        }
        if (СУ2.out_default_movement == true) {
            движение.defaultMovement(параметры.м[2], СУ2.out_default_movement_len, СУ2.out_default_movement_mode);
        }
        
        // mechanoid2Control();
    }
    if (параметры.м[3].жив) {
        // Инициализация входящих данных СУ3
        СУ3.механоид = параметры.м[3];        
        СУ3.количество_зарядов = параметры.м[3].пушка.количество_зарядов;
        СУ3.out_rocket_launch = false;
        СУ3.out_target_movement = false;
        СУ3.out_default_movement = false;
        СУ3.out_default_sinus_movement = false;
        
        СУ3.mechanoidControl();
        
        // Обработка выходящих данных из СУ3
        if (СУ3.out_rocket_launch == true) {
            оружие.rocketLaunch(параметры.м[3], СУ3.out_rocket_target_x, СУ3.out_rocket_target_y);
            //mechanoid.sendLogMsg("Механоид" + 3 + " время выстрела " + параметры.м[3].пушка.время_выстрела);
        }
        if (СУ3.out_target_movement == true) {
            движение.targetMovement(параметры.м[3], СУ3.out_target_movement_x, СУ3.out_target_movement_y);
        }
        if (СУ3.out_default_movement == true) {
            движение.defaultMovement(параметры.м[3], СУ3.out_default_movement_len, СУ3.out_default_movement_mode);
        }
        
        if (СУ3.out_default_sinus_movement == true) {
            движение.defaultSinusMovement(параметры.м[3], СУ3.out_default_sinus_movement_amplitude, СУ3.out_default_sinus_movement_len, СУ3.out_default_sinus_movement_mode);
        }
        
        // mechanoid3Control();
    }       
}

// Определение функции обратного вызова (callback) для отображения результатов моделирования
void onShow() {
//    chart.addPoint( "0", scene.t(), 0.0);
//    graph3d.addPint oint("М"+1, м[1].д.y1, м[1].д.y2, м[1].д.y3);
    for(int i=0; i < константы.количество_механоидов; ++i) {
//        chart.addPoint( "nxt"+i, scene.t(), м[i].д.nxt);
        chart.addPoint( "P"+i, scene.t(), параметры.м[i].д.P);
//        chart.addPoint( "Vg"+i, scene.t(), м[i].д.Vg);
//        chart.addPoint( "y5"+i, scene.t(), м[i].д.y5);
//        chart.addPoint( "y2"+i, scene.t(), м[i].д.y2);
        chart.addPoint( "X"+i, scene.t(), параметры.м[i].д.X);
//        chart.addPoint( "R"+i, scene.t(),
//                       math.sqrt((образец.параметры.флаг.x-м[i].д.y1)^2 
//                        + (образец.параметры.флаг.z-м[i].д.y3)^2));
        if (параметры.м[i].жив) {
            mechanoid.addPoint("М"+i, параметры.м[i].д.y1, параметры.м[i].д.y3);
        }
        
        if (параметры.м[i].пушка.количество_зарядов != параметры.м[i].пушка.макс_колво_зарядов) {
            for(int j = параметры.м[i].пушка.макс_колво_зарядов - 1; j >= параметры.м[i].пушка.количество_зарядов; --j) {
                if (параметры.м[i].пушка.обойма[j].отображать == true) {
                    mechanoid.addPoint("Ракета" + параметры.м[i].имя + j, параметры.м[i].пушка.обойма[j].ракета.y1, параметры.м[i].пушка.обойма[j].ракета.y3);
                    оружие.rocketOnScene(параметры.м[i], j);
                    rocketHit(i);
                }
            }
        }
    }
        

    for (int i =0; i < константы.количество_флагов; i++) {
        if (параметры.флаг[i].отображать == true) {
            sys.print("Ф" + i);
            mechanoid.addPoint("Ф" + i, параметры.флаг[i].x, параметры.флаг[i].y);
        }
    }
}

// Инициализация сцены
scene.setIterationCallback(onShow, 10);
scene.setEachIterationCallback(onIteration);
scene.setRealtimeModeEnabled(true); 
scene.setT(0.0);
scene.setDt(0.01);
scene.setTk(3000.0);

// Запуск моделирования
scene.start();

