import "параметры_неизм.scriptc0" type Константы константы;
import "динамика.diff" type Динамика;
import "механоид.scriptc0" type Механоид;

void mechanoidUpdateStatus(string name, int health, int load) {
}

//  mechanoid.addSettings("Ракета " + i + " " + j, mechanoid.Mesh.Square, константы.размер_ракеты, mechanoid.Color.Magenta);
void mechanoidAddSettings(string name, int shape, int size, int color) {
}

void mechanoidRemovePoint(string name) {
}

void sceneAdd(Динамика д) {
}

void sceneRemove(Динамика д) {
}

float sceneT() {
}

// Запсукает снаряд пушки из обоймы
void rocketLaunch(Механоид м, float xj, float zj) {
    
    if (м.пушка.количество_зарядов != 0) {
        // sys.print("(X1, y1): " + м[i].д.y1 + ", " + м[i].д.y3 + " (x2, y2) : " + xj + ", " + zj);
        if ((scene.t() - м.пушка.скорострельность) > 1.0) {    
            if ((math.toInt(zj - м.д.y3) != 0) || ((math.toInt(xj - м.д.y1) != 0))) {
                float xj_new; 
                float zj_new;
                // Уменьшение обоймы 
                м.пушка.количество_зарядов -= 1;
                mechanoidUpdateStatus(м.имя, м.здоровье, м.пушка.количество_зарядов);
                // mechanoid.updateStatus("М"+i, м.здоровье, м.пушка.количество_зарядов);
                int j = 0; 
                j = м.пушка.количество_зарядов;
                
                // Установка начальных координат ракеты
                м.пушка.обойма[j].ракета.y1 = м.д.y1;
                м.пушка.обойма[j].ракета.y2 = м.д.y2;
                м.пушка.обойма[j].ракета.y3 = м.д.y3;
                
                // При помощи урванения прямой
                if (xj >= м.д.y1) 
                {
                    xj_new = xj + константы.высота_поля;
                    zj_new = ((xj_new - м.д.y1) / (xj - м.д.y1) * (zj - м.д.y3) + м.д.y3);
                }
                else
                {
                    xj_new = xj - константы.высота_поля;
                    zj_new = ((xj_new - м.д.y1) / (xj - м.д.y1) * (zj - м.д.y3) + м.д.y3);
                }
                
                // Установка конечных координат ракеты
                м.пушка.обойма[j].ракета.xc = xj_new;
                м.пушка.обойма[j].ракета.zc = zj_new;
                // м.пушка.обойма[j].ракета.xc = xj;
                // м.пушка.обойма[j].ракета.zc = zj;
                м.пушка.обойма[j].ракета.V_z = константы.скорость_выстрела;
                sceneAdd(м.пушка.обойма[j].ракета);
                mechanoidAddSettings("Ракета" + м.имя + j, 2, константы.размер_ракеты, 9);
                // scene.add(м.пушка.обойма[j].ракета);
            }
            м.пушка.скорострельность = sceneT();
            // м.пушка.скорострельность = scene.t();
        }
    }
    /*
    else {
        // При помощи урванения прямой
        if (zj >= м[i].д.y3) 
        {
            zj_new = zj + параметры.ширина_поля;
            xj_new = ((zj_new - м[i].д.y3) / (zj - м[i].д.y3) * (xj - м[i].д.y1) + м[i].д.y1);
        }
        else
        {
            zj_new = zj - параметры.ширина_поля;
            xj_new = ((zj_new - м[i].д.y3) / (zj - м[i].д.y3) * (xj - м[i].д.y1) + м[i].д.y1);
        }
    }
    */
}

// Проверка, что ракета внутри поля
void rocketOnScene(Механоид м, int j) {
    j = j;
    if (((м.пушка.обойма[j].ракета.y1 > - math.toFloat(константы.ширина_поля)) && (м.пушка.обойма[j].ракета.y1 < math.toFloat(константы.ширина_поля))) &&
       ((м.пушка.обойма[j].ракета.y3 > - math.toFloat(константы.высота_поля)) && (м.пушка.обойма[j].ракета.y3 < math.toFloat(константы.высота_поля))))
       {}
    else {
        м.пушка.обойма[j].отображать = false;
        
        sceneRemove(м.пушка.обойма[j].ракета);
        mechanoidRemovePoint("Ракета" + м.имя + j);
        // scene.remove(м.пушка.обойма[j].ракета);
        // mechanoid.removePoint("Ракета" + м.имя + j);
    }
}
