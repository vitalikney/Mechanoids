/*************** Система управления по каналам ***************/
import "lab2-05.diff" type LA;
import "support.scriptc0" type S s;

// Идентификатор
string la_name;
// Математическая модель
LA la;

// Режимы управления по высоте
//.. Ручное управление
//.. (отключает работу данного блока)
int HM_MANUAL = -1;
//.. Смена эшелона
int HM_CHANGE_ECHELON = 0;
//.. Посадка в точку
int HM_LAND_TO_TARGET = 1;

//.. Для режима HM_CHANGE_ECHELON
//.. нужен коэффициент,
//.. исключающий колебания
//.. при малом изменении высоты
float HM_CHANGE_ECHELON_Kh = 0.5;
//.. Коэффициент для ограничения
//.. подъёмной силы в зависимости
//.. от модуля скорости аппарата
float HM_CHANGE_ECHELON_Ky5 = 0.01;
//.. Ограничения вертикальной скорости
float HM_CHANGE_ECHELON_y5_min = -70.0;
float HM_CHANGE_ECHELON_y5_max = 20.0;

//.. Переменная, в которой записан
//.. текущий режим управления по высоте
int height_mode = HM_CHANGE_ECHELON;

// Режимы управления по курсу
//.. Ручное управление
//.. (отключает работу данного блока)
int PM_MANUAL = -1;
//.. Режим сохранения курса
int PM_HOLD_PSI = 0;
//.. Режим следования за целью
//.. в горизонтальной плоскости
int PM_FOLLOW_TARGET = 1;
//.. Режим ухода от цели
//.. в горизонтальной плоскости
int PM_AVOID_TARGET  = 2;
//.. Режим выравнивая
//.. по линии маршрута
int PM_FOLLOW_LINE = 3;

//.. Переменная, в которой записан
//.. текущий режим управления по курсу
int psi_mode = PM_HOLD_PSI;

//.. Объявления типа целеуказателя
import "lab2-05-control-target.scriptc0" type Target;

//.. Одна из точек, по которой
//.. строится линия маршрута
Target PM_FOLLOW_LINE_base_point = { x : 0.0, z : 0.0 };
//.. Коэффициент изменения курса
//.. по дальности от линии маршрута
float PM_FOLLOW_LINE_Kdelta = -0.0005;

//.. Служебный объект для режимов.
//.. Является целеуказателем.
Target target = { x : 0.0
                , height : 0.0
                , z : 0.0
                , v : 0.0
                , psi : 0.0
};

// Функция итерации управления по каналам.
// Рассчитывает входы математической модели
// по каналам
void iterate()
{
    // Установка заданного модуля скорости
    la.v_z = target.v;

    // Вектор от аппарата к цели
    float delta_x = target.x - la.y1;
    float delta_z = target.z - la.y3;

    // Расстояние до цели
    // в горизонтальной плоскости
    float rg = s.vector2dLength(delta_x, delta_z);
    // Функция вернёт значение,
    // которое при возведении в квадрат
    // не будет обращаться в ноль
    // из-за машинного представления чисел
    rg = s.excludeZero(rg);

    // Модуль скорости
    // в горизонтальной плоскости
    float vg = s.vector2dLength(la.y4, la.y6);
    // Функция вернёт значение,
    // которое при возведении в квадрат
    // не будет обращаться в ноль
    // из-за машинного представления чисел
    vg = s.excludeZero(vg);

    // Обработка режима по высоте:
    // смена эшелона.
    // Высота, которую надо достичь,
    // задана в target.height
    if (height_mode == HM_CHANGE_ECHELON)
    {
        // Заданная вертикальная скорость
        // зависит от заданного изменения высоты
        // через коэффициент
        la.y5_z = HM_CHANGE_ECHELON_Kh
                    * (target.height - la.y2);
        // Заданная вертикальная скорость
        // имеет ограничения
        la.y5_z = s.limit(la.y5_z, HM_CHANGE_ECHELON_y5_min, HM_CHANGE_ECHELON_y5_max);
        // Ограничение заданной скорости
        // сверху по модулю скорости
        // (медленное движение не позволит
        // быстро набрать высоту)
        float y5_max_by_v = HM_CHANGE_ECHELON_Ky5 * la.v;
        // Применение ограничения сверху
        if (y5_max_by_v < la.y5_z)
        {
            la.y5_z = y5_max_by_v;
        }
    }
    // Обработка режима по высоте:
    // посадка в точку.
    // Координаты точки заданы в
    // target.x и target.z
    else if (height_mode == HM_LAND_TO_TARGET)
    {
        // Полёт с постоянной скоростью
        // так, чтобы попасть в точку
        // на поверхности
        // (соблюдается полёт под
        // определённым углом)
        la.y5_z = - la.y2 * la.v / rg;
    }

    // Обработка режима по курсу:
    // удержание курса.
    // Курс задан в target.psi
    if (psi_mode == PM_HOLD_PSI)
    {
        // Область значений курса: 0..2*пи
        float psi_z = s.limit(target.psi, 0.0, 2.0 * math.const_pi());
        // Текущее отклонение
        // от заданного курса
        float delta_psi = psi_z - la.psi;
        // Приводим полученную разность
        // к области значений -пи..пи
        if (delta_psi < -math.const_pi())
        {
            delta_psi += 2.0 * math.const_pi();
        }
        else if (delta_psi > math.const_pi())
        {
            delta_psi -= 2.0 * math.const_pi();
        }
        la.delta_psi_z = delta_psi;
    }
    // Обработка режима по курсу:
    // следование или избегание цели.
    // Координаты цели заданы в
    // target.x и target.z
    else if (psi_mode == PM_FOLLOW_TARGET
                || psi_mode == PM_AVOID_TARGET)
    {
        // Расчёт отклонения текущего курса
        // от курса, который направлен в цель
        float sin_target_psi = (la.y4 * delta_z - la.y6 * delta_x)
                                / (vg * rg);
        float cos_target_psi = (la.y4 * delta_x + la.y6 * delta_z)
                                / (vg * rg);
        la.delta_psi_z = math.atan2(sin_target_psi, cos_target_psi);

        // Если цель нужно избежать,
        // то меняем заданный курс
        // на половину оборота (пи).
        // Разворот происходит в сторону
        // от цели
        // (аппарат не полетит навстречу,
        // пытаясь выйти на нужный курс)
        if (psi_mode == PM_AVOID_TARGET)
        {
            if (la.delta_psi_z < 0.0)
                 la.delta_psi_z += math.const_pi();
            else la.delta_psi_z -= math.const_pi();
        }
    }
    // Обработка режима по курсу:
    // полёт вдоль линии.
    // Аппарат будет стремится выйти
    // на курс, заданный вектором,
    // и будет стремится сокращать
    // расстояние до линии.
    // Линия задана вектором.
    // Начало вектора определено
    // точкой:
    // {
    //   PM_FOLLOW_LINE_base_point.x,
    //   PM_FOLLOW_LINE_base_point.z
    // }
    // Конец вектора определён
    // точкой
    // {target.x, target.z}
    else if (psi_mode == PM_FOLLOW_LINE)
    {
        // Курс, заданный линией
        float psi_follow = math.atan2(
            target.z - PM_FOLLOW_LINE_base_point.z
            , target.x - PM_FOLLOW_LINE_base_point.x
            );
        // Приведение курса линии
        // к области значений 0..2*пи
        if (psi_follow < 0.0)
        {
            psi_follow += 2 * math.const_pi();
        }

        // Вектор заданный точкой
        // начала вектора линии
        // {
        //   PM_FOLLOW_LINE_base_point.x,
        //   PM_FOLLOW_LINE_base_point.z
        // }
        // и точкой аппарата {la.x, la.z}
        // в горизонтальной
        // плоскости
        float a[2] = [
            la.y1 - PM_FOLLOW_LINE_base_point.x
            , la.y3 - PM_FOLLOW_LINE_base_point.z
        ];
        // Вектор заданный точкой
        // начала вектора линии
        // {
        //   PM_FOLLOW_LINE_base_point.x,
        //   PM_FOLLOW_LINE_base_point.z
        // }
        // и точкой цели {target.x, target.z}
        // в горизонтальной
        // плоскости
        float b[2] = [
            target.x - PM_FOLLOW_LINE_base_point.x
            , target.z - PM_FOLLOW_LINE_base_point.z
        ];

        // Расстояние до линии
        // Для предотвращения деления на ноль
        // используется функция, возвращающая
        // малое число, сохраняющее знак, если
        // на вход подаётся число близкое к нулю
        // либо возвращает исходное число
        float delta = - (a[0]*b[1] - b[0]*a[1])
                        / s.excludeZero(s.vector2dLength(b[0], b[1]));
        // Перевод расстояние в дополнительное отклонение
        // в зависимости от расстояния до линии и прибавление
        // отклонения текущего курса от курса линии
        float delta_psi_z = s.limit(
                                PM_FOLLOW_LINE_Kdelta * delta
                                , -math.const_pi() / 4
                                , math.const_pi() / 4
                            )
                            + psi_follow - la.psi;
        // Приведение заданного отклонения
        // к области значений -пи..пи
        while (delta_psi_z < -math.const_pi())
        {
            delta_psi_z += 2 * math.const_pi();
        }
        while (delta_psi_z > math.const_pi())
        {
            delta_psi_z -= 2 * math.const_pi();
        }
        la.delta_psi_z = delta_psi_z;
    }
}

/********** Система управления по сценариям **********/

// Сценарии управления
//.. Ручное управление
//.. (отключает работу данного блока)
int MODE_MANUAL = -1;
//.. Сценарий покоя.
//.. Аппарат сохраняет
//.. текущую высоту и курс
int MODE_IDLE   = 0;
//.. Сценарий взлёта.
//.. Аппарат находится на высоте 0,
//.. пока не разовьёт необходимую скорость.
//.. Сценарий автоматически переключается
//.. в сценарий покоя, когда аппарат
//.. набирает достаточную скорость и высоту
int MODE_LAUNCH = 1;
//.. Сценарий посадки в точку
//.. с постоянной вертикальной
//.. скоростью:
//.. { target.x, 0.0, target.z }
//.. Сценарий автоматически переключается
//.. в сценарий покоя, когда аппарат
//.. набирает достаточную скорость и высоту
int MODE_LAND   = 2;
//.. Сценарий полёта по маршруту.
//.. Маршрут задаётся массивом
//.. MODE_PPM_route, который
//.. содержит координаты точек
//.. и скорости с которыми их нужно
//.. достичь.
//.. Между точками маршрута происходит
//.. выравнивание вдоль линии, соединяющей
//.. точки маршрута.
//.. Достижение точки считается успешным,
//.. если в горизонтальной плоскости
//.. аппарат оказался в круге,
//.. центр которого есть точка маршрута
int MODE_PPM    = 3;
//.. Сценарий атаки цели.
//.. Аппарат летит за целью в точке
//.. { target.x, target.height, target.z }
int MODE_ATTACK_TARGET = 4;
//.. Сценарий ухода от цели.
//.. Аппарат от цели в точке
//.. { target.x, target.height, target.z }
int MODE_AVOID_TARGET  = 5;

//.. Переменная, в которой записан
//.. текущий сценарий
int mode = MODE_IDLE;

// Настройки сценария взлёта
//.. Скорость отрыва от
//.. взлётно-посадочной
//.. полосы
float MODE_LAUNCH_vpp_off_v = 80.0;
//.. Скорость, которую
//.. в лучшем случае
//.. необходимо достигнуть
float MODE_LAUNCH_v = 200.0;
//.. Высота, которую
//.. в лучшем случае
//.. необходимо достигнуть
float MODE_LAUNCH_h = 120.0;

// Настройки сценария полёта
// по маршруту
// (mode == mode_ppm)
//.. Маршрут
auto MODE_PPM_route = [
    // координата x,
    //.. высота,
    //.... координата z,
    //...... заданный модуль скорости,
    [-26000.0, 250.0, 0.0    , 100.0, ],
    [-18000.0, 250.0, 0.0    , 80.0 , ],
    [-10000.0, 250.0, 0.0    , 69.0 , ],
    [0.0     , 0.0  , 0.0    , 69.0 , ],
    [1000.0  , 0.0  , 0.0    , 40.0 , ],
];
//.. Индекс текущей точки маршрута
int MODE_PPM_point_index = 0;
//.. Функция вычисления
//.. максимального индекса
//.. точек маршрута
int MODE_PPM_max_index()
{
    return sys.dimension_size(MODE_PPM_route, 0) - 1;
}
//.. Радиус цилиндра, с бесконечной высотой
//.. в который должен попасть аппарат
float MODE_PPM_point_radius = 100.0;

// События сценария
//.. Переменная количества событий
int n_events = 0;

//.. Событие выхода на маршрут
int EVENT_OUT_PPM   = n_events++;
//.. Событие посадки
int EVENT_LANDED    = n_events++;
//.. Событие прохода точки маршрута
int EVENT_POINT_PASSED  = n_events++;
//.. Событие прохода последней
//.. точки маршрута
int EVENT_TARGET_PASSED = n_events++;
//.. Событие провала ухода от цели.
//.. Если цель оказалась очень близко,
//.. возникает это событие
int EVENT_AVOID_FAILED  = n_events++;
//.. Событие завершение взлёта.
//.. Событие возникает, когда аппарат
//.. набирает достаточную скорость и высоту
int EVENT_LAUNCH_FINISHED = n_events++;

//.. Массив событий
bool events[n_events];
//.. Предварительное очищение событий
for (int i = 0; i < n_events; ++i)
{ events[i] = false; }

// Функция итерации управления по сценариям.
// Рассчитывает входы системы управления
// по каналам
void onIteration()
{
    // Предварительное очищение событий
    for (int i = 0; i < n_events; ++i)
    { events[i] = false; }

    // Обработка сценария покоя
    if (mode == MODE_IDLE)
    {
        // Задание режимов управления
        // по каналам
        height_mode = HM_CHANGE_ECHELON;
        psi_mode    = PM_HOLD_PSI;

        // Текущая высота
        // устанавливается как
        // высота для удержания
        target.height = la.y2;
        // Текущий курс
        // устанавливается как
        // курс для удержания
        target.psi    = la.psi;
    }
    // Обработка сценария взлёта
    else if (mode == MODE_LAUNCH)
    {
        // Задание режимов управления
        // по каналам
        height_mode = HM_CHANGE_ECHELON;
        psi_mode    = PM_HOLD_PSI;

        // Задание скорости, которую
        // необходимо набрать
        target.v    = MODE_LAUNCH_v;
        // Текущий курс
        // устанавливается как
        // курс для удержания
        target.psi  = la.psi;

        // Если мягкие требования
        // по скорости и высоте
        // НЕ(!) выполнены
        if ((la.v < 0.75 * MODE_LAUNCH_v)
            || (la.y2 < 0.9 * MODE_LAUNCH_h))
        {
            // Если скорость отрыва достигнута
            if (MODE_LAUNCH_vpp_off_v < la.v)
            {
                // Указание высоты подъёма
                target.height = MODE_LAUNCH_h;
            }
            // Отрыв от полосы не происходит
            else la.y2 = 0.0;
        }
        // Если мягкие требования
        // по скорости и высоте
        // выполнены
        else
        {
            // Установка события завершения взлёта
            events[EVENT_LAUNCH_FINISHED] = true;
            // Установка сценария покоя
            mode = MODE_IDLE;
        }
    }
    // Обработка сценария посадки
    else if (mode == MODE_LAND)
    {
        // Если посадка выполнена
        if (la.y2 <= 0.0)
        {
            // Установка события посадки
            events[EVENT_LANDED] = true;
            // Установка сценария покоя
            mode = MODE_IDLE;

            iterate();

            // Завершение обработки
            return;
        }

        // Задание режимов управления
        // по каналам
        height_mode = HM_LAND_TO_TARGET;
        psi_mode    = PM_FOLLOW_TARGET;
    }
    // Обработка сценария полёта по маршруту
    else if (mode == MODE_PPM)
    {
        // Если посадка выполнена
        if (la.y2 <= 0.0)
        {
            // Установка события посадки
            events[EVENT_LANDED] = true;
            // Установка сценария покоя
            mode = MODE_IDLE;

            iterate();

            // Завершение обработки
            return;
        }

        // Задание режима управления
        // по высоте
        height_mode = HM_CHANGE_ECHELON;

        // Если аппарат летит к
        // первой точке маршрута
        if (MODE_PPM_point_index == 0)
        {
            // Задание режима управления
            // по курсу
            psi_mode    = PM_FOLLOW_TARGET;

            // Установка первой точки маршрута
            // как цели следования
            target.x    = MODE_PPM_route[0, 0];
            target.height = MODE_PPM_route[0, 1];
            target.z    = MODE_PPM_route[0, 2];
            target.v    = MODE_PPM_route[0, 3];
        }
        // Если аппарат летит НЕ(!) к
        // первой точке маршрута
        else
        {
            // Задание режима управления
            // по курсу
            psi_mode    = PM_FOLLOW_LINE;
        }

        // Если аппарат попал в цилиндр
        // вокруг точки маршрута
        if (s.vector2dLength(target.x - la.y1, target.z - la.y3)
            < MODE_PPM_point_radius)
        {
            // Если точка маршрута последняя
            if (MODE_PPM_point_index
                == MODE_PPM_max_index())
            {
                // Сброс индекса точки маршрута
                MODE_PPM_point_index = 0;
                // Установка события прохождения
                // последней точки маршрута
                events[EVENT_TARGET_PASSED] = true;
                // Установка сценария покоя
                mode = MODE_IDLE;
            }
            // Если точка маршрута НЕ(!) последняя
            else
            {
                // Установка события прохождения
                // точки маршрута
                events[EVENT_POINT_PASSED] = true;
                // Увеличение индекса текущей
                // точки маршрута
                int index = ++MODE_PPM_point_index;

                // Установка точки
                // начала вектора линии
                // как предыдущей точки маршрута
                PM_FOLLOW_LINE_base_point.x =
                    MODE_PPM_route[index - 1, 0];
                PM_FOLLOW_LINE_base_point.z =
                    MODE_PPM_route[index - 1, 2];

                // Установка целеуказания для
                // текущей точки маршрута
                target.x    = MODE_PPM_route[index, 0];
                target.height = MODE_PPM_route[index, 1];
                target.z    = MODE_PPM_route[index, 2];
                target.v    = MODE_PPM_route[index, 3];
            }
        }
    }
    // Обработка сценария атаки цели
    else if (mode == MODE_ATTACK_TARGET)
    {
        // Задание режимов управления
        // по каналам
        height_mode = HM_CHANGE_ECHELON;
        psi_mode    = PM_FOLLOW_TARGET;
    }
    // Обработка сценария ухода от цели
    else if (mode == MODE_AVOID_TARGET)
    {
        // Задание режимов управления
        // по каналам
        height_mode = HM_CHANGE_ECHELON;
        psi_mode    = PM_AVOID_TARGET;

        // Расчёт расстояния до цели
        float distance_to_target =
            s.vector3dLength(la.y1 - target.x
                            , la.y2 - target.height
                            , la.y3 - target.z
                            );
        // Если цель оказалась слишком
        // близко, то установить событие
        // провала ухода от цели
        if (distance_to_target < 10.0)
        { events[EVENT_AVOID_FAILED] = true; }
    }

    // После выполнения итерации сценария
    // необходимо вызвать итерацию
    // управления по каналам.
    // Если включено ручное управление,
    // то вызывать итерацию не следует
    if (mode != MODE_MANUAL)
    {
        iterate();
    }
}
